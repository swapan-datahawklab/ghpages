{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"ansible/Ansible_File_Variable_Defaults/","title":"Ansible File Variable Defaults","text":"<p>Swapan: ansible loop over a file check compare with named list set default value if variable in file does not exist </p> <p>ChatGPT: To achieve this in Ansible, you can create a playbook that reads from a file and loops over its content, comparing the values with a named list, and setting a default value if a variable does not exist. Here\u2019s how you could structure such a playbook:</p>"},{"location":"ansible/Ansible_File_Variable_Defaults/#1-read-from-a-file","title":"1. Read from a File","text":"<p>Assume <code>vars_file.txt</code> contains key-value pairs or just variable names.</p>"},{"location":"ansible/Ansible_File_Variable_Defaults/#2-create-a-named-list","title":"2. Create a Named List","text":"<p>Create a list of expected variable names.</p>"},{"location":"ansible/Ansible_File_Variable_Defaults/#3-compare-and-set-default-values","title":"3. Compare and Set Default Values","text":"<p>Use a loop and <code>default</code> filter to ensure any missing variable gets a default value.</p> <p>Here's an example playbook:</p> <pre><code>- name: Check variables from a file and set defaults if missing\n  hosts: localhost\n  vars:\n    expected_vars:\n      - var1\n      - var2\n      - var3\n      - var4\n    defaults:\n      var1: \"default_value1\"\n      var2: \"default_value2\"\n      var3: \"default_value3\"\n      var4: \"default_value4\"\n\n  tasks:\n    - name: Read variables from a file\n      slurp:\n        src: vars_file.txt\n      register: file_content\n\n    - name: Parse the file content\n      set_fact:\n        file_vars: \"{{ file_content.content | b64decode | split('\\n') | reject('equalto', '') | list }}\"\n\n    - name: Ensure variables have default values if not in the file\n      set_fact:\n        final_vars: \"{{ final_vars | default({}) | combine({ item: defaults[item] }) }}\"\n      with_items: \"{{ expected_vars }}\"\n      when: item not in file_vars\n\n    - name: Print final variables\n      debug:\n        var: final_vars\n</code></pre>"},{"location":"ansible/Ansible_File_Variable_Defaults/#explanation","title":"Explanation:","text":"<ul> <li><code>slurp</code>: Reads the content of the file as base64 and decodes it.</li> <li><code>split('\\n')</code>: Splits the content into a list of variables.</li> <li><code>combine()</code>: Adds missing variables from <code>expected_vars</code> to <code>final_vars</code> with their default values if they don\u2019t exist in <code>file_vars</code>.</li> <li><code>debug</code>: Outputs the <code>final_vars</code> to confirm the result.</li> </ul>"},{"location":"ansible/Ansible_File_Variable_Defaults/#notes","title":"Notes:","text":"<ul> <li>Ensure <code>vars_file.txt</code> contains the variable names or lines formatted as needed.</li> <li>The <code>defaults</code> dictionary holds default values for each variable.</li> </ul> <p>This structure makes it easy to verify, compare, and set default values for variables found in a file.</p>"},{"location":"ansible/powershellcli/","title":"Powershellcli","text":""},{"location":"ansible/powershellcli/#script-to-setup-powershell-script","title":"script to setup powershell script","text":"<pre><code>#!/bin/bash\n\n# Define the base project directory\nBASE_DIR=\"./OpenShiftProject\"\n\n# Define module directories\nMODULES_DIR=\"$BASE_DIR/Modules\"\nMODES_DIR=\"$BASE_DIR/Modes\"\n\n# Create directory structure\nmkdir -p \"$MODULES_DIR\"\nmkdir -p \"$MODES_DIR\"\n\n# Create module files\ncat &gt; \"$MODULES_DIR/CheckEnvironment.psm1\" &lt;&lt; 'EOL'\nfunction Test-OcExecutable {\n    if (-not (Get-Command \"oc.exe\" -ErrorAction SilentlyContinue)) {\n        throw \"The 'oc.exe' CLI tool is not installed or not available in the system PATH.\"\n    }\n}\nExport-ModuleMember -Function Test-OcExecutable\nEOL\n\ncat &gt; \"$MODULES_DIR/OpenShiftLogin.psm1\" &lt;&lt; 'EOL'\nfunction Connect-OpenShiftCluster {\n    param (\n        [string]$ClusterName,\n        [string]$Username,\n        [string]$Password\n    )\n\n    $BaseUrl = \"https://api.openshift.{0}.example.com:6443\"\n    $OpenShiftUrl = $BaseUrl -f $ClusterName.ToLower()\n\n    $loginResult = &amp; oc.exe login $OpenShiftUrl --username=$Username --password=$Password --insecure-skip-tls-verify 2&gt;&amp;1\n\n    if ($loginResult -match \"Login successful\") {\n        return \"Login successful to $ClusterName as $Username.\"\n    } else {\n        throw \"Login failed: $loginResult\"\n    }\n}\nExport-ModuleMember -Function Connect-OpenShiftCluster\nEOL\n\ncat &gt; \"$MODULES_DIR/ProjectManagement.psm1\" &lt;&lt; 'EOL'\nfunction Get-OpenShiftProjectsWithNumbers {\n    $projectsOutput = &amp; oc.exe get projects -o jsonpath=\"{range .items[*]}{.metadata.name}{'\\n'}{end}\" 2&gt;&amp;1\n\n    if ($LASTEXITCODE -ne 0) {\n        Write-Host \"Failed to retrieve projects: $projectsOutput\" -ForegroundColor Red\n        return @()\n    }\n\n    $projects = $projectsOutput -split \"`n\" | Where-Object { $_ -ne \"\" }\n\n    $projectsWithNumbers = @()\n    for ($i = 0; $i -lt $projects.Count; $i++) {\n        $projectsWithNumbers += (\"{0} {1}\" -f ($i + 1), $projects[$i])\n    }\n\n    return $projectsWithNumbers\n}\n\nfunction Set-OpenShiftProject {\n    param (\n        [string]$ProjectName\n    )\n    $switchOutput = &amp; oc.exe project $ProjectName 2&gt;&amp;1\n    if ($switchOutput -match \"Now using project\") {\n        return \"Switched to project '$ProjectName'.\"\n    } else {\n        return \"Failed to switch to project '$ProjectName': $switchOutput\"\n    }\n}\nExport-ModuleMember -Function Get-OpenShiftProjectsWithNumbers, Set-OpenShiftProject\nEOL\n\ncat &gt; \"$MODES_DIR/ConsoleMode.psm1\" &lt;&lt; 'EOL'\nfunction Invoke-OpenShiftConsole {\n    param (\n        [string]$ClusterName,\n        [string]$Username,\n        [string]$Password\n    )\n\n    try {\n        Test-OcExecutable\n        $loginMessage = Connect-OpenShiftCluster -ClusterName $ClusterName -Username $Username -Password $Password\n        Write-Host $loginMessage -ForegroundColor Green\n\n        $projects = Get-OpenShiftProjectsWithNumbers\n        if (-not $projects) {\n            Write-Host \"No projects found!\" -ForegroundColor Yellow\n            return\n        }\n\n        Write-Host \"`nAvailable Namespaces:\" -ForegroundColor Cyan\n        $projects | ForEach-Object { Write-Host $_ }\n\n        Write-Host \"`nEnter the number corresponding to the namespace you want to switch to:\"\n        $selectedNumber = Read-Host \"Namespace Number\"\n\n        if ($selectedNumber -match '^\\d+$') {\n            $index = [int]$selectedNumber - 1\n            if ($index -ge 0 -and $index -lt $projects.Count) {\n                $selectedNamespace = ($projects[$index] -split \" \", 2)[1]\n                $switchMessage = Set-OpenShiftProject -ProjectName $selectedNamespace\n                Write-Host $switchMessage -ForegroundColor Green\n            } else {\n                Write-Host \"Invalid selection. Please enter a valid number from the list.\" -ForegroundColor Red\n            }\n        } else {\n            Write-Host \"Invalid input. Please enter a number.\" -ForegroundColor Red\n        }\n    } catch {\n        Write-Host $_.Exception.Message -ForegroundColor Red\n    }\n}\nExport-ModuleMember -Function Invoke-OpenShiftConsole\nEOL\n\ncat &gt; \"$MODES_DIR/GuiMode.psm1\" &lt;&lt; 'EOL'\nfunction Show-OpenShiftGui {\n    Add-Type -AssemblyName PresentationCore, PresentationFramework\n\n    $xaml = @\"\n&lt;Window xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        Title=\"OpenShift Login and Projects\" Height=\"450\" Width=\"600\"&gt;\n    &lt;Grid Margin=\"10\"&gt;\n        &lt;Grid.RowDefinitions&gt;\n            &lt;RowDefinition Height=\"Auto\" /&gt;\n            &lt;RowDefinition Height=\"Auto\" /&gt;\n            &lt;RowDefinition Height=\"Auto\" /&gt;\n            &lt;RowDefinition Height=\"Auto\" /&gt;\n            &lt;RowDefinition Height=\"*\" /&gt;\n            &lt;RowDefinition Height=\"Auto\" /&gt;\n        &lt;/Grid.RowDefinitions&gt;\n        &lt;Grid.ColumnDefinitions&gt;\n            &lt;ColumnDefinition Width=\"Auto\" /&gt;\n            &lt;ColumnDefinition Width=\"*\" /&gt;\n        &lt;/Grid.ColumnDefinitions&gt;\n\n        &lt;TextBlock Grid.Row=\"0\" Grid.Column=\"0\" Margin=\"5\" VerticalAlignment=\"Center\"&gt;Cluster Name:&lt;/TextBlock&gt;\n        &lt;ComboBox x:Name=\"ClusterComboBox\" Grid.Row=\"0\" Grid.Column=\"1\" Margin=\"5\" /&gt;\n\n        &lt;TextBlock Grid.Row=\"1\" Grid.Column=\"0\" Margin=\"5\" VerticalAlignment=\"Center\"&gt;Username:&lt;/TextBlock&gt;\n        &lt;TextBox x:Name=\"UsernameTextBox\" Grid.Row=\"1\" Grid.Column=\"1\" Margin=\"5\" /&gt;\n\n        &lt;TextBlock Grid.Row=\"2\" Grid.Column=\"0\" Margin=\"5\" VerticalAlignment=\"Center\"&gt;Password:&lt;/TextBlock&gt;\n        &lt;PasswordBox x:Name=\"PasswordBox\" Grid.Row=\"2\" Grid.Column=\"1\" Margin=\"5\" /&gt;\n\n        &lt;ListBox x:Name=\"ProjectsListBox\" Grid.Row=\"3\" Grid.ColumnSpan=\"2\" Margin=\"5\" Visibility=\"Collapsed\" /&gt;\n\n        &lt;StackPanel Orientation=\"Horizontal\" Grid.Row=\"5\" Grid.ColumnSpan=\"2\" HorizontalAlignment=\"Center\" Margin=\"5\"&gt;\n            &lt;Button x:Name=\"LoginButton\" Content=\"Login\" Width=\"100\" Margin=\"5\" /&gt;\n            &lt;Button x:Name=\"SwitchProjectButton\" Content=\"Switch Project\" Width=\"150\" Margin=\"5\" IsEnabled=\"False\" /&gt;\n            &lt;Button x:Name=\"CancelButton\" Content=\"Cancel\" Width=\"100\" Margin=\"5\" /&gt;\n        &lt;/StackPanel&gt;\n    &lt;/Grid&gt;\n&lt;/Window&gt;\n\"@\n\n    $reader = New-Object System.Xml.XmlNodeReader([xml]$xaml)\n    $window = [Windows.Markup.XamlReader]::Load($reader)\n\n    $window.ShowDialog() | Out-Null\n}\nExport-ModuleMember -Function Show-OpenShiftGui\nEOL\n\n# Create the main script file\ncat &gt; \"$BASE_DIR/Main.ps1\" &lt;&lt; 'EOL'\n# Import modules\nImport-Module -Name \"$PSScriptRoot/Modules/CheckEnvironment.psm1\"\nImport-Module -Name \"$PSScriptRoot/Modules/OpenShiftLogin.psm1\"\nImport-Module -Name \"$PSScriptRoot/Modules/ProjectManagement.psm1\"\nImport-Module -Name \"$PSScriptRoot/Modes/ConsoleMode.psm1\"\nImport-Module -Name \"$PSScriptRoot/Modes/GuiMode.psm1\"\n\nif ($args.Count -eq 0) {\n    Show-OpenShiftGui\n} else {\n    if ($args.Count -lt 3) {\n        Write-Host \"Usage: .\\Main.ps1 &lt;ClusterName&gt; &lt;Username&gt; &lt;Password&gt;\" -ForegroundColor Yellow\n        exit 1\n    }\n\n    $ClusterName = $args[0]\n    $Username = $args[1]\n    $Password = $args[2]\n\n    Invoke-OpenShiftConsole -ClusterName $ClusterName -Username $Username -Password $Password\n}\nEOL\n\necho \"Project structure created successfully in $BASE_DIR.\"\n\n</code></pre>"}]}